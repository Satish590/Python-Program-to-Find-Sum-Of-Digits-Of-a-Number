#Python Program to Find Sum Of Digits Of a Number  Using String Character Extraction
num = input()
sum = 0
for i in num:
    sum += int(i)
print(sum)
#Using Brute Force
num = int(input())
sum = 0
while num != 0:
    digit = int(num % 10)
    sum += digit
    num = num/10
print(sum)
#Using Recursion I
num = int(input())
sum = 0
def findsum(num,sum):
    if num == 0:
        return sum
    digit = int(num%10)
    sum += digit
    return findsum(num/10,sum)
print(findsum(num,sum))
# Using Recursion II
num = int(input())
def findsum(num):
    if num == 0:
        return 0
    return int(num%10) + findsum(num/10)
print(findsum(num))
#Using ASCII Table
num, sum = 12345, 0

for i in range(len(str(num))):
    # ord methods helps with ASCII
    sum += ord(str(num)[i]) - 48

print(sum)
#Using map(), sum() and strip methods
num = int(input())
def getsum(num):
    num_string = str(num)
    list_of_numbers = list(map(int,num_string.strip()))

    return sum(list_of_numbers)
print(getsum(num))
# single line recursive function
num = int(input())
def getsum(num):
    return 0 if num == 0 else int(num%10) + getsum(int(num/10))
print(getsum(num))
